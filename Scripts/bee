#!/bin/bash
set -e

# Shell Style Guide
# https://google.github.io/styleguide/shell.xml

################################################################################
# Globals
################################################################################
readonly SCRIPTS="$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)"
readonly ROOT="$(dirname ${SCRIPTS})"

readonly PROJECT="DesperateDevs"
readonly SOLUTION="${ROOT}/${PROJECT}.sln"
readonly BIN="bin/Release"

readonly TESTS_PROJECT="${ROOT}/Tests/Tests.csproj"
readonly TESTS_RUNNER="${ROOT}/Tests/${BIN}/Tests.exe"

readonly BUILD="${ROOT}/Build"
readonly BUILD_SRC="${BUILD}/src"

################################################################################
# Utils
################################################################################
log() {
  echo "🐝  $@"
}

err() {
  echo "❌  ERROR: $@" >&2
}

logb() {
  echo ""
  echo "################################################################################"
  echo "# 🐝  $@"
  echo "################################################################################"
}

logf() {
  logb "${FUNCNAME[1]} $@"
}

clean_dir() {
  logf "$@"
  rm -rf "$@"
  mkdir -p "$@"
}

require() {
  command -v "$1" > /dev/null 2>&1 || {
    err "Error: $1 not found! $1 is required. Try \"brew install $1\"."
    exit 1
  }
}

sync_files() {
  rsync -ai --include-from "${SCRIPTS}/rsync_include.txt" --exclude-from "${SCRIPTS}/rsync_exclude.txt" "$1" "$2"
}

################################################################################
# Tasks
################################################################################
build() {
  local path
  if [[ $# -eq 1 ]]; then
    path="$1"
  else
    path="${SOLUTION}"
  fi

  logf "${path}"
  xbuild /property:Configuration=Release /verbosity:minimal "${path}"
}

clean() {
  logf
  xbuild /target:Clean /property:Configuration=Release /verbosity:minimal "${SOLUTION}"
}

build_tests() {
  build "${TESTS_PROJECT}"
}

run_tests() {
  logf
  mono "${TESTS_RUNNER}" $@
}

################################################################################
# Workflows
################################################################################
clean_build() {
  logf
  clean
  build
}

tests() {
  logf
  build_tests
  run_tests "$@"
}

pack() {
  logf
  clean_build
  tests
}

################################################################################
# Test projects
################################################################################
collect_codegenerator_cli() {
  logf
  local codegenerator="${BUILD_SRC}/Jenny"
  local plugins="${codegenerator}/Plugins/DesperateDevs"
  clean_dir "${codegenerator}" "${plugins}"

  declare -a -r projects=(
    "DesperateDevs.CodeGeneration.CodeGenerator.CLI"
    "DesperateDevs.CodeGeneration.Plugins"
    "DesperateDevs.CodeGeneration.Unity.Plugins"
  )
  for p in "${projects[@]}"; do
    sync_files "${ROOT}/${p}/${BIN}/" "${codegenerator}"
  done

  declare -a -r to_plugins=(
    "DesperateDevs.CodeGeneration.Plugins.dll"
    "DesperateDevs.CodeGeneration.Unity.Plugins.dll"
  )
  for f in "${to_plugins[@]}"; do
    mv "${codegenerator}/${f}" "${plugins}"
  done

  mv "${codegenerator}/DesperateDevs.CodeGeneration.CodeGenerator.CLI.exe" "${codegenerator}/Jenny.exe"
}

collect_codegenerator_unity() {
  logf
  local codegenerator="${BUILD_SRC}/Unity/Jenny/Assets/Jenny"
  local editor="${codegenerator}/Editor"
  local plugins="${editor}/Plugins/DesperateDevs"
  clean_dir "${codegenerator}" "${editor}" "${plugins}"

  declare -a -r projects=(
    "DesperateDevs.CodeGeneration.CodeGenerator.Unity.Editor"
    "DesperateDevs.CodeGeneration.Plugins"
    "DesperateDevs.CodeGeneration.Unity.Plugins"
  )
  for p in "${projects[@]}"; do
    sync_files "${ROOT}/${p}/${BIN}/" "${codegenerator}"
  done

  declare -a -r to_editor=(
    "DesperateDevs.Analytics.dll"
    "DesperateDevs.CodeGeneration.CodeGenerator.Unity.Editor.dll"
    "DesperateDevs.CodeGeneration.CodeGenerator.dll"
    "DesperateDevs.CodeGeneration.dll"
    "DesperateDevs.Networking.dll"
    "DesperateDevs.Serialization.dll"
    "DesperateDevs.Unity.Editor.dll"
  )
  for f in "${to_editor[@]}"; do
    mv "${codegenerator}/${f}" "${editor}"
  done

  declare -a -r to_plugins=(
    "DesperateDevs.CodeGeneration.Plugins.dll"
    "DesperateDevs.CodeGeneration.Unity.Plugins.dll"
  )
  for f in "${to_plugins[@]}"; do
    mv "${codegenerator}/${f}" "${plugins}"
  done
}

collect() {
  collect_codegenerator_cli
  collect_codegenerator_unity
}

sync_unity_codegenerator() {
  logf
  collect

  local cli="${ROOT}/Tests/Unity/CodeGenerator/Jenny"
  clean_dir "${cli}"
  sync_files "${BUILD_SRC}/Jenny/" "${cli}"

  local unity_libs="${ROOT}/Tests/Unity/CodeGenerator/Assets/Libraries"
  clean_dir "${unity_libs}"
  sync_files "${BUILD_SRC}/Unity/Jenny/Assets/Jenny" "${unity_libs}"
}

sync() {
  clean_dir "${BUILD_SRC}"
  sync_unity_codegenerator
}

################################################################################
# Bee
################################################################################
main() {
  if [[ $# -ge 1 ]]; then
    local start=${SECONDS}
    $@
    local elapsed=$((${SECONDS} - ${start}))
    log "bzzzz (${elapsed} seconds)"
  else
    logb "Commands:"
    compgen -A function
  fi
}

main "$@"
